<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
	    http://www.springframework.org/schema/context   
	    http://www.springframework.org/schema/context/spring-context-4.0.xsd  
	    http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd    
	    http://www.springframework.org/schema/aop 
     	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
     	
    <context:property-placeholder file-encoding="utf-8" location="classpath:global.properties" ignore-resource-not-found="false" />
     	
	<context:component-scan base-package="com.maixian" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
	</context:component-scan>
	
	<!-- 配置dataSource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" />

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<tx:annotation-driven transaction-manager="transactionManager" order="3" />
	
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<bean id="displayAspect" class="io.vanadar.ext.meta.DisplayAspect" p:customOrder="2" />
	<bean id="validatorAspect" class="io.vanadar.ext.meta.ValidatorAspect" p:customOrder="1" />
	<bean class="io.vanadar.ext.SpringContextHolder"/>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:typeAliasesPackage="com.maixian.b2c.api.bean" 
		p:mapperLocations="classpath*:com/maixian/serv/b2c/*/mapper/xml/*.xml" />
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:sqlSessionFactory-ref="sqlSessionFactory"
		p:basePackage="com.maixian.serv.b2c.*.mapper"/>
		
		
	<bean id="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig"
		p:testOnBorrow="true"
		p:maxTotal="100"
		p:maxIdle="20" />
	
	<!-- 系统订单缓存 -->
	<bean id="orderPool" class="redis.clients.jedis.JedisPool" destroy-method="close">
		<constructor-arg type="GenericObjectPoolConfig" name="poolConfig" ref="genericObjectPoolConfig" />
		<constructor-arg type="String" name="host" value="${order.redis.host}" />
		<constructor-arg type="int" name="port" value="${order.redis.port}" />
		<constructor-arg type="int" name="timeout" value="30000" />
		<constructor-arg type="String" name="password" value="ijk!Kq$T5n" />
	</bean>
	
	<bean id="redisOrderSubHolder" class="com.maixian.serv.meta.RedisOrderSubHolder" init-method="init">
		<constructor-arg index="0" ref="orderPool" />
	</bean>
		
	<!-- 系统验证码缓存 -->
	<bean id="codePool" class="redis.clients.jedis.JedisPool" destroy-method="close">
		<constructor-arg type="GenericObjectPoolConfig" name="poolConfig" ref="genericObjectPoolConfig" />
		<constructor-arg type="String" name="host" value="${code.redis.host}" />
		<constructor-arg type="int" name="port" value="${code.redis.port}" />
		<constructor-arg type="int" name="timeout" value="30000" />
		<constructor-arg type="String" name="password" value="ijk!Kq$T5n" />
	</bean>
	
</beans>